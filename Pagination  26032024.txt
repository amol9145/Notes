import { useState, useEffect } from "react";
import { Pagination } from "react-bootstrap";
import "bootstrap/dist/css/bootstrap.min.css";

function App() {
  // State to store fetched data
  const [data, setData] = useState([]);
  // Total number of items
  const [totalItems, setTotalItems] = useState(0);
  // Number of items to display per page
  const itemsPerPage = 5;
  // State to manage current page
  const [currentPage, setCurrentPage] = useState(1);

  // Fetch data from API
  const fetchData = async (pageNumber) => {
    try {
      const response = await fetch(`https://jsonplaceholder.typicode.com/users?_page=${pageNumber}&_limit=${itemsPerPage}`);
      const newData = await response.json();
      setData(newData);
      // Get total count of items from response headers
      const totalCount = response.headers.get('X-Total-Count');
      setTotalItems(Number(totalCount));
    } catch (error) {
      console.error("Error fetching data:", error);
    }
  };

  // Fetch initial data when the component mounts
  useEffect(() => {
    fetchData(currentPage);
  }, [currentPage]);

  // Calculate total number of pages
  const totalPages = Math.ceil(totalItems / itemsPerPage);

  // Change page
  const handlePageChange = (pageNumber) => {
    setCurrentPage(pageNumber);
  };

  return (
    <div>
      <table className="table table-striped">
        <thead>
          <tr>
            <th scope="col">#</th>
            <th scope="col">Name</th>
            <th scope="col">Username</th>
            <th scope="col">Email</th>
          </tr>
        </thead>
        <tbody>
          {data.map((item, index) => (
            <tr key={index}>
              <th scope="row">{item.id}</th>
              <td>{item.name}</td>
              <td>{item.username}</td>
              <td>{item.email}</td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* Pagination */}
      <div className="d-flex mx-auto">
        <Pagination>
          {Array.from({ length: totalPages }).map((_, index) => (
            <Pagination.Item
              key={index}
              active={index + 1 === currentPage}
              onClick={() => handlePageChange(index + 1)}
            >
              {index + 1}
            </Pagination.Item>
          ))}
        </Pagination>
      </div>
    </div>
  );
}

export default App;







import React, { useState, useEffect } from "react";
import "./styles.css";

export default function App() {
  const [posts, setPosts] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [postsPerPage] = useState(10); // Number of posts per page

  useEffect(() => {
    fetch("https://dummyjson.com/posts")
      .then((response) => {
        if (!response.ok) {
          throw new Error("Failed to fetch posts");
        }
        return response.json();
      })
      .then((data) => {
        if (data && Array.isArray(data.posts)) {
          setPosts(data.posts);
        } else {
          throw new Error("Invalid data format");
        }
      })
      .catch((error) => console.error("Error fetching data:", error));
  }, []);

  // Get current posts
  const indexOfLastPost = currentPage * postsPerPage;
  const indexOfFirstPost = indexOfLastPost - postsPerPage;
  const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);

  // Change page
  const paginate = (pageNumber) => setCurrentPage(pageNumber);

  return (
    <div className="App">
      <h1>Hello CodeSandbox</h1>
      <h2>Start editing to see some magic happen!</h2>
      <div>
        <h2>Posts</h2>
        {currentPosts.map((post, index) => (
          <div className="row mb-3 bg-secondary text-light" key={index}>
            <div className="col">{post.title}</div>
            <div className="col">{post.userId}</div>
            <div className="col">{post.tags}</div>
          </div>
        ))}
        {/* Pagination */}
        <ul className="pagination">
          {currentPage > 1 && (
            <li className="page-item">
              <button
                onClick={() => paginate(currentPage - 1)}
                className="page-link"
              >
                Previous
              </button>
            </li>
          )}
          {[1, 2].map((pageNumber) => (
            <li key={pageNumber} className="page-item">
              <button
                onClick={() => paginate(pageNumber)}
                className={`page-link ${
                  currentPage === pageNumber && "active"
                }`}
              >
                {pageNumber}
              </button>
            </li>
          ))}
          {currentPage < Math.ceil(posts.length / postsPerPage) && (
            <li className="page-item">
              <button
                onClick={() => paginate(currentPage + 1)}
                className="page-link"
              >
                Next
              </button>
            </li>
          )}
        </ul>
      </div>
    </div>
  );
}
