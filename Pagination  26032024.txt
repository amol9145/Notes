import { useState, useEffect } from "react";
import { Pagination } from "react-bootstrap";
import "bootstrap/dist/css/bootstrap.min.css";

function App() {
  // State to store fetched data
  const [data, setData] = useState([]);
  // Total number of items
  const [totalItems, setTotalItems] = useState(0);
  // Number of items to display per page
  const itemsPerPage = 5;
  // State to manage current page
  const [currentPage, setCurrentPage] = useState(1);

  // Fetch data from API
  const fetchData = async (pageNumber) => {
    try {
      const response = await fetch(`https://jsonplaceholder.typicode.com/users?_page=${pageNumber}&_limit=${itemsPerPage}`);
      const newData = await response.json();
      setData(newData);
      // Get total count of items from response headers
      const totalCount = response.headers.get('X-Total-Count');
      setTotalItems(Number(totalCount));
    } catch (error) {
      console.error("Error fetching data:", error);
    }
  };

  // Fetch initial data when the component mounts
  useEffect(() => {
    fetchData(currentPage);
  }, [currentPage]);

  // Calculate total number of pages
  const totalPages = Math.ceil(totalItems / itemsPerPage);

  // Change page
  const handlePageChange = (pageNumber) => {
    setCurrentPage(pageNumber);
  };

  return (
    <div>
      <table className="table table-striped">
        <thead>
          <tr>
            <th scope="col">#</th>
            <th scope="col">Name</th>
            <th scope="col">Username</th>
            <th scope="col">Email</th>
          </tr>
        </thead>
        <tbody>
          {data.map((item, index) => (
            <tr key={index}>
              <th scope="row">{item.id}</th>
              <td>{item.name}</td>
              <td>{item.username}</td>
              <td>{item.email}</td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* Pagination */}
      <div className="d-flex mx-auto">
        <Pagination>
          {Array.from({ length: totalPages }).map((_, index) => (
            <Pagination.Item
              key={index}
              active={index + 1 === currentPage}
              onClick={() => handlePageChange(index + 1)}
            >
              {index + 1}
            </Pagination.Item>
          ))}
        </Pagination>
      </div>
    </div>
  );
}

export default App;
